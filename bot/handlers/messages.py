import logging
from datetime import datetime

from aiogram import Router, types

from bot.services.calculator import calculate_customs
from parsers.parsers import parse_car_info
from services.price_service import PriceService
from utils.logger import setup_logging

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()


@router.message()
async def handle_car_info(message: types.Message):
    try:
        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text[:50]}...")

        parsed_data = parse_car_info(message.text)
        if not parsed_data:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ")
            return

        # –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = {
            'brand': "–º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            'model': "–º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            'year': "–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞",
            'engine': "–æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è",
            'power': "–º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è",
            'price': "—Ü–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
            'mileage': "–ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        missing_fields = [field_name for field, field_name in required_fields.items()
                          if field not in parsed_data or parsed_data[field] is None]

        if missing_fields:
            error_message = "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö:\n"
            error_message += "\n".join(f"‚Ä¢ {field}" for field in missing_fields)
            error_message += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
            example = "\n\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\nVolkswagen Tiguan\n2024 –≥.–≤.\n2.0 –ª\n200 –ª.—Å.\n50 000 –∫–º\n29 500 $"
            await message.answer(error_message + example)
            return

        validations = {
            'year': lambda x: 1900 < x < (datetime.now().year + 1),
            'engine': lambda x: 0.5 < x < 10,
            'power': lambda x: 50 < x < 1500,
            'price': lambda x: x > 100,
            'mileage': lambda x: x >= 0
        }

        invalid_fields = []
        for field, validator in validations.items():
            if field in parsed_data and not validator(parsed_data[field]):
                invalid_fields.append(field)

        if invalid_fields:
            await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è: {', '.join(invalid_fields)}")
            return

        # –†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–Ω–∏
        try:
            result = calculate_customs(
                price_usd=parsed_data['price'],
                engine=parsed_data['engine'],
                power=parsed_data['power'],
                year=parsed_data['year']
            )
            logging.info("–†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–º–æ–∂–Ω–∏: {str(e)}", exc_info=True)
            result = None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω
        market_data = {}
        try:
            async with PriceService() as price_service:
                market_data = await price_service.get_market_prices(
                    brand=parsed_data.get('brand', ''),
                    model=parsed_data.get('model', ''),
                    engine=parsed_data['engine'],
                    power=parsed_data['power'],
                    mileage=parsed_data['mileage'],
                    year=parsed_data['year']
                )
            logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω: {market_data}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω: {str(e)}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = [
            f"üöó <b>–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ:</b>",
            f"‚Ä¢ –ì–æ–¥: {parsed_data['year']}",
            f"‚Ä¢ –û–±—ä–µ–º: {parsed_data['engine']} –ª",
            f"‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: {parsed_data['power']} –ª.—Å.",
            f"‚Ä¢ –¶–µ–Ω–∞: {parsed_data['price']:,}$",
            f"‚Ä¢ –ü—Ä–æ–±–µ–≥: {parsed_data['mileage']:,} –∫–º"
        ]

        if result:
            response.extend([
                f"\nüìå <b>–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:</b>",
                f"- –ü–æ—à–ª–∏–Ω–∞: {result['customs_duty']:,.0f} ‚ÇΩ",
                f"- –ê–∫—Ü–∏–∑: {result['excise']:,.0f} ‚ÇΩ",
                f"- –ù–î–°: {result['vat']:,.0f} ‚ÇΩ",
                f"- –£—Ç–∏–ª—å—Å–±–æ—Ä: {result['recycling_fee']:,.0f} ‚ÇΩ",
                f"- –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã: {result['additional_costs']:,.0f} ‚ÇΩ",
                f"- –°–µ—Ä–≤–∏—Å: {result['service_costs']:,.0f} ‚ÇΩ",
                f"\nüíµ <b>–ò—Ç–æ–≥–æ: {result['total']:,.0f} ‚ÇΩ</b>\n"
            ])
        else:
            response.append("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–∞–º–æ–∂–Ω—é")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω
        try:
            async with PriceService() as price_service:
                market_data = await price_service.get_market_prices(
                    brand=parsed_data.get('brand', ''),
                    model=parsed_data.get('model', ''),
                    engine=parsed_data['engine'],
                    power=parsed_data['power'],
                    mileage=parsed_data['mileage'],
                    year=parsed_data['year']
                )

            if market_data and isinstance(market_data, dict):
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ—Ä–Ω—è market_data, –∞ –Ω–µ –∏–∑ price_stats
                price_min = market_data.get('price_min')
                price_max = market_data.get('price_max')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                formatted_min = f"{price_min:,} ‚ÇΩ".replace(',', ' ') if price_min else 'N/A'
                formatted_max = f"{price_max:,} ‚ÇΩ".replace(',', ' ') if price_max else 'N/A'

                response.extend([
                    f"\nüè∑ <b>–†—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã:</b>",
                    f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {formatted_min}",
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {formatted_max}",
                    f"‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {market_data.get('ads_count', 0)}",
                    f"‚Ä¢ <a href='{market_data.get('url', '')}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫</a>",
                    f"‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {market_data.get('page_title', 'N/A')}"
                ])

                logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω: {market_data.get('listings')}")

                if market_data.get('listings'):
                    response.append("\nüîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>")
                    for idx, item in enumerate(market_data['listings'][:5], 1):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ —Ä–∞–≤–Ω—ã –ª–∏ –æ–Ω–∏ –Ω—É–ª—é
                        price = item.get('price')
                        mileage = item.get('mileage')
                        year = item.get('year')

                        if price and mileage and year:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∏ –ø—Ä–æ–±–µ–≥ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                            formatted_price = f"{price:,}".replace(',', ' ') + " ‚ÇΩ"

                            response.append(f"   {formatted_price} | {year} –≥. | {mileage} –∫–º.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω: {str(e)}", exc_info=True)

        await message.answer("\n".join(response), parse_mode="HTML", disable_web_page_preview=True)

    except Exception as e:
        logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
