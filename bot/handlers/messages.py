import logging

from aiogram import Router, types

from bot.services.calculator import calculate_customs
from parsers.parsers import parse_car_info
from services.price_service import PriceService
from utils.logger import setup_logging

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()


@router.message()
async def handle_car_info(message: types.Message):
    try:
        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text[:50]}...")

        parsed_data = parse_car_info(message.text)
        if not parsed_data:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ")
            return

        logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {parsed_data}")

        # –†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–Ω–∏
        try:
            result = calculate_customs(
                price_usd=parsed_data['price'],
                engine=parsed_data['engine'],
                power=parsed_data['power'],
                year=parsed_data['year']
            )
            logging.info("–†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–º–æ–∂–Ω–∏: {str(e)}", exc_info=True)
            result = None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω
        market_data = {}
        try:
            async with PriceService() as price_service:
                market_data = await price_service.get_market_prices(
                    brand=parsed_data.get('brand', ''),
                    model=parsed_data.get('model', ''),
                    year=parsed_data['year']
                )
            logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω: {market_data}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω: {str(e)}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = [
            f"üöó <b>–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ:</b>",
            f"‚Ä¢ –ì–æ–¥: {parsed_data['year']}",
            f"‚Ä¢ –û–±—ä–µ–º: {parsed_data['engine']} –ª",
            f"‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: {parsed_data['power']} –ª.—Å.",
            f"‚Ä¢ –¶–µ–Ω–∞: {parsed_data['price']:,}$",
            f"‚Ä¢ –ü—Ä–æ–±–µ–≥: {parsed_data['mileage']:,} –∫–º"
        ]

        if result:
            response.extend([
                f"\nüìå <b>–†–∞—Å—á–µ—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏:</b>",
                f"- –ü–æ—à–ª–∏–Ω–∞: {result['customs_duty']:,.0f} ‚ÇΩ",
                f"- –ê–∫—Ü–∏–∑: {result['excise']:,.0f} ‚ÇΩ",
                f"- –ù–î–°: {result['vat']:,.0f} ‚ÇΩ",
                f"- –£—Ç–∏–ª—å—Å–±–æ—Ä: {result['recycling_fee']:,.0f} ‚ÇΩ",
                f"- –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã: {result['additional_costs']:,.0f} ‚ÇΩ",
                f"- –°–µ—Ä–≤–∏—Å: {result['service_costs']:,.0f} ‚ÇΩ",
                f"\nüíµ <b>–ò—Ç–æ–≥–æ: {result['total']:,.0f} ‚ÇΩ</b>\n"
            ])
        else:
            response.append("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–∞–º–æ–∂–Ω—é")

        market_data = {}
        try:
            async with PriceService() as price_service:
                market_data = await price_service.get_market_prices(
                    brand=parsed_data.get('brand', ''),
                    model=parsed_data.get('model', ''),
                    year=parsed_data['year']
                )
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            response += [
                f"üè∑ <b>–¶–µ–Ω—ã –Ω–∞ Drom.ru:</b>",
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {market_data.get('price_min', 'N/A')} ‚ÇΩ",
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {market_data.get('price_max', 'N/A')} ‚ÇΩ",
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞: <a href='{market_data.get('url', '')}'>–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</a>",
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {market_data.get('page_title', 'N/A')}"
            ]

            if isinstance(market_data, str):  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ market_data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                logging.error("–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞.")
                market_data = {}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω: {str(e)}", exc_info=True)

        await message.answer("\n".join(response), parse_mode="HTML", disable_web_page_preview=True)
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
